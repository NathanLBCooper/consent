definitions:
  domain.Agreement:
    properties:
      acceptedTime:
        type: string
      contractVersionId:
        type: string
      participantId:
        type: string
      permissionId:
        type: string
    type: object
  domain.OrganizationMember:
    properties:
      role:
        $ref: '#/definitions/domain.Role'
    type: object
  domain.OrganizationModel:
    properties:
      created:
        type: string
      id:
        type: string
      members:
        additionalProperties:
          $ref: '#/definitions/domain.OrganizationMember'
        type: object
      name:
        type: string
      removed:
        type: boolean
      updated:
        type: string
    type: object
  domain.ParticipantModel:
    properties:
      acceptedPermissionIds:
        description: read model. Calculated from AllAgreements
        items:
          type: string
        type: array
      allAgreements:
        items:
          $ref: '#/definitions/domain.Agreement'
        type: array
      created:
        type: string
      externalId:
        type: string
      id:
        type: string
      organizationId:
        type: string
      removed:
        type: boolean
      updated:
        type: string
    type: object
  domain.Role:
    type: object
  domain.User:
    properties:
      name:
        type: string
    type: object
  domain.UserModel:
    properties:
      created:
        type: string
      id:
        type: string
      name:
        type: string
      removed:
        type: boolean
      updated:
        type: string
    type: object
  server.componentHealth:
    properties:
      detail:
        type: string
      isHealthy:
        type: boolean
      name:
        type: string
    type: object
  server.healthResponse:
    properties:
      components:
        items:
          $ref: '#/definitions/server.componentHealth'
        type: array
    type: object
  server.organizationCreateRequest:
    properties:
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/account/organization:
    post:
      parameters:
      - description: Create organization
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/server.organizationCreateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OrganizationModel'
      summary: Create an Organization
  /v1/account/organization/{id}:
    get:
      parameters:
      - description: Organization Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OrganizationModel'
      summary: Get an Organization
  /v1/account/user:
    post:
      parameters:
      - description: Create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.UserModel'
      summary: Create a user
  /v1/account/user/{id}:
    get:
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.UserModel'
      summary: Get an user
  /v1/health:
    get:
      description: Get component by component health status
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.healthResponse'
      summary: Get Health
  /v1/participant/{id}:
    get:
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ParticipantModel'
      summary: Get an participant
swagger: "2.0"
