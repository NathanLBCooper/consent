// <auto-generated />
using Consent.Storage.Contacts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consent.Storage.Migrations.Contracts
{
    [DbContext(typeof(ContractDbContext))]
    partial class ContractDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("contracts")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Consent.Domain.Contracts.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contracts", "contracts");
                });

            modelBuilder.Entity("Consent.Domain.Contracts.ContractVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractVersion", "contracts");
                });

            modelBuilder.Entity("Consent.Domain.Contracts.Provision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractVersionId");

                    b.ToTable("Provision", "contracts");
                });

            modelBuilder.Entity("Consent.Domain.Contracts.ContractVersion", b =>
                {
                    b.HasOne("Consent.Domain.Contracts.Contract", null)
                        .WithMany("Versions")
                        .HasForeignKey("ContractId");
                });

            modelBuilder.Entity("Consent.Domain.Contracts.Provision", b =>
                {
                    b.HasOne("Consent.Domain.Contracts.ContractVersion", null)
                        .WithMany("Provisions")
                        .HasForeignKey("ContractVersionId");
                });

            modelBuilder.Entity("Consent.Domain.Contracts.Contract", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Consent.Domain.Contracts.ContractVersion", b =>
                {
                    b.Navigation("Provisions");
                });
#pragma warning restore 612, 618
        }
    }
}
